<%
# Copyright 2014 Egbert van der Wal <egbert@assistobot.com>
#
# This file is part of redmine_planning
#
# redmine_planning is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# redmine_planning is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with redmine_planning. If not see <http://www.gnu.org/licenses/>.
%>
<div class="contextual">
<% if !@query.new_record? && @query.editable_by?(User.current) %>
  <%= link_to l(:button_edit), edit_query_path(@query, :planning => 1), :class => 'icon icon-edit' %>
  <%= delete_link query_path(@query, :planning => 1) %>
<% end %>
</div>

<h2><%= @query.new_record? ? l(:label_planning) : h(@query.name) %></h2>

<%= form_tag({:controller => 'planning', :action => 'show',
             :project_id => @project, :month => params[:month],
             :year => params[:year]},
             :method => :get, :id => 'query_form') do %>
<%= hidden_field_tag 'set_filter', '1' %>
<fieldset id="filters" class="collapsible <%= @query.new_record? ? "" : "collapsed" %>">
  <legend onclick="toggleFieldset(this);"><%= l(:label_filter_plural) %></legend>
  <div style="<%= @query.new_record? ? "" : "display: none;" %>">
    <%= render :partial => 'queries/filters', :locals => {:query => @query} %>
  </div>
</fieldset>
<p class="buttons">
<%= link_to_function l(:button_apply), '$("#query_form").submit()',
                     :class => 'icon icon-checked' %>
<%= link_to l(:button_clear), { :project_id => @project, :set_filter => 1 },
            :class => 'icon icon-reload' %>
<% if @query.new_record? && User.current.allowed_to?(:save_queries, @project, :global => true) %>
  <%= link_to_function l(:button_save),
                       "$('#query_form').attr('action', '#{ @project ? new_project_query_path(@project) : new_query_path }').submit();",
                       :class => 'icon icon-save' %>
<% end %>
</p>
<% end %>

<div id="rmc_container" style="margin: 0 -10px 0 -10px; padding: 0;">
    <div id="redmine_planning_chart" style="width: 100%; margin: 0; padding: 0;">
    </div>
</div>

<% content_for :header_tags do %>
    <%= stylesheet_link_tag 'planning', :plugin => 'redmine_planning' %>
    <%= stylesheet_link_tag 'ionicons', :plugin => 'redmine_planning' %>
    <%= javascript_include_tag 'raphael' %>
    <%= javascript_include_tag 'jquery-mousewheel', :plugin => 'redmine_planning' %>
    <%= javascript_include_tag 'jquery.ui-contextmenu.min.js', :plugin => 'redmine_planning' %>
    <%
    options = {}
    options[:locale] = User.current.language unless User.current.language.blank?

    # Prepare settings passed along to javascript plugin
    plugin_settings = {}
    Setting.plugin_redmine_planning.each do |k, v|
      plugin_settings[k.to_sym] = v
    end

    # Validate settings
    default = Setting.available_settings['plugin_redmine_planning']['default'].clone
    default.each do |key, value|
      plugin_settings[key.to_sym] = value unless plugin_settings.has_key?(key.to_sym) or plugin_settings.has_key?(key.to_s)
    end

    plugin_settings[:tracker]['Default'] = default[:tracker]['Default'] if not plugin_settings[:tracker].has_key?('Default')

    # Remove all old configuration
    plugin_settings.each do |key, value|
      plugin_settings.delete(key) unless default.has_key?(key.to_sym) or default.has_key?(key.to_s)
    end

    # Get full list of trackers
    trackers = {}
    Tracker.find_each do |tracker|
      trackers[tracker[:id]] = tracker[:name]
    end

    # Convert tracker IDs to tracker names
    keys = plugin_settings[:tracker].keys
    keys.each do |key|
      next if key == "Default"
      next if not trackers.has_key?(key)
      val = plugin_settings[:tracker][key]
      plugin_settings[:tracker][trackers[key]] = val
      plugin_settings[:tracker].delete(key)
    end

    # Provide project and date format to Javascript
    plugin_settings[:project] = @project[:identifier] unless @project.blank?
    plugin_settings[:date_format] = Setting[:date_format]
    plugin_settings[:date_format] = ::I18n.t('date.formats.default', options) unless not plugin_settings[:date_format].blank?

    # Add month abbreviations and names
    plugin_settings[:month_names] = ::I18n.t('date.month_names', options)
    plugin_settings[:abbr_month_names] = ::I18n.t('date.abbr_month_names', options)

    # Add root path to Redmine
    plugin_settings[:urls] = {}
    plugin_settings[:urls][:root] = home_url
    plugin_settings[:urls][:get_issues] = @project.blank? ? rmp_gget_issues_path : rmp_get_issues_path(@project.identifier)
    plugin_settings[:urls][:save_planning] = @project.blank? ? rmp_gsave_planning_path : rmp_save_planning_path(@project.identifier)

    # Add translations
    plugin_settings[:translations] = {}
    I18n.t('planning').each do |str, v|
        plugin_settings[:translations][str] = v
    end
    plugin_settings[:translations]["field_done_ratio"] = t("field_done_ratio".to_sym, options)

    %>
    <%= javascript_tag "var redmine_planning_settings = " + JSON.generate(plugin_settings, :quirks_mode => true) %>
    <%= javascript_include_tag 'planning', :plugin => 'redmine_planning' %>
<% end %>
